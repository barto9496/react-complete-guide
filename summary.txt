The problem with JSX model file

If there are two adjacent root jsx element then we will get an error. Two jsx elements beside each others will 
fail. The topmost element must only be one element and have multiple child elements. We can have / add an <div>
but it will fail as we will end up in the <div> soup 


techincally <div> soup is something of a loop of divs

<div>
    <div>
        <div>
        </div>
    <div>
<div>

While this doesn't actually hurt the system, it more or less causes unforseen error in the system which can cause
further problems with styling or any other related details. 

One way to resolve the above issue is by using the Wrapper method where in you just created a wrapper component and 
return it to the system it creates a component rather than a <div> soup. 

Instead of creating a wrapper you can jsut use a react fragment. 
The following syntaxes are

<>
    <div>
    </div> 
</>

# Introduction to react Portals
React portals are another useful feature which do help us write cleaner code 

Take this example code:

return(
    <React.Fragment> 
        <MyModal />
        <MyInputForm />
    </React.Fragment>
)


the above code translates to 
<section>
    <h2> Some other content .... </h2>
    <div class="my-modal">
        <h2>A Modal title</h2>
    </div>
    <form>
        <label>Username</label>
        <input type="text" />
    </form>
</section>

Semantically and from a "clean HTML structure" perspective, having this nested modal isn't ideal. It is an overlay to 
the entire page after all (that's similar for side-drawers, other dialogs etc.).

Why the above example is bad because we can look at it this way: 

instead of creating a <button> </button> we create a <div class={onClickHandler}> I'm a bad button </div> 

****************** Overlay content cannot be nested alongside other elements rather they should be overlay of the other
elements(i.e., on top of the other elements)

<div class="my-modal">
        <h2>A Modal title</h2>
</div>
<section>
    <h2> Some other content .... </h2>
    <form>
        <label>Username</label>
        <input type="text" />
    </form>
</section>

The above code can be achieved using Portal refs. 


How to use a portals: Portals need two things :

1. Place where you want to port the component to
2. The component which needs to be ported



Working with Refs. References what do refs do, refs are quite powerful they allow us to access other dom elements and work with
them.

Lets take an example where we have inputs and when we have inputs we manage those using the states which are then fed to the input. 
SO basically what happens there is that you get the input keystorke and then store it in the input so basically typing. Which we don't
need to do. So, what can be done in that situation is we can use refs but refs aren't just limited to that

React uncontrolled are the components which aren't controlled by react. Rather these are controlled by the user hence
they're uncontrolled react components. 

React controls the components those kinds are called controlled components. 